{% import './templates/statements.j2' as macro_statements %}

{% macro key(name, algorithm=none, secret=none) %}
key {{ name }} {
{% if algorithm is not none %}
  algorithm {{ algorithm }};
{% endif %}
{% if secret is not none %}
  secret "{{ secret }}";
{% endif %}
};
{#
keys:
  - name: dhcp_updater
    algorithm: "HMAC-MD5.SIG-ALG.REG.INT"
    secret: "thisisntaverysecurepassphrase"
#}
{%- endmacro %}

{% macro cds_digest_types(args) %}
{% if args|length > 0 -%}
cds-digest-types { {{ args|join(';') }}; };
{% endif %}
{# dnssec-policy
---
cds_digest_types:
  - string
  - string
  - ...    
#}
{%- endmacro %}


{%- macro dnssec_policy_keys(args) -%}
  {%- set ns = namespace(keys=[], key=[]) -%}
  {%- for key in args -%}
    {%- set ns.key = [] -%}
    {%- for key_opt in bind_clauses.dnssec_policy['keys'] -%}
        {%- if key_opt != 'algorithm_value' and key_opt in key -%}
        {{ ns.key.extend([key_opt.replace('_', '-'), key[key_opt]|string()]) }}
        {%- endif -%}
    {%- endfor -%}
    {%- if 'algorithm_value' in key -%}
        {{ ns.key.append(key['algorithm_value']|string()) }}
    {%- endif -%} 
    {{ ns.keys.append( ns.key|join(' ')) }} 
  {%- endfor %}
  keys { {{ ns.keys|join(";\n") }}; };
{# dnssec-policy
---
keys:
  - type: csk | ksk | zsk
    key_directory: /some/path/
    key_store: string
    lifetime: value
    algorithm: string
    algorithm_value: int
  - type: ...
#}
{%- endmacro -%}

{%- macro nsec3param(args) -%}
  {%- set params = [] -%}
  {%- for statement in bind_clauses.dnssec_policy.nsec3param -%}
    {%- if statement in args -%}
{{ params.append(statement|replace('_', '-')) }}{{ params.append(args[statement]|string()) }}
    {%- endif -%}
  {%- endfor -%}
nsec3param {{ params|join(' ') }};
{# dnssec-policy
---
nsec3param:
  iterations: int
  optout: "yes" | "no"
  salt_length: int  
#}
{%- endmacro -%}


{% macro dnssec_policy(dnssec_policy_args) -%}
{% for statement in bind_clauses.dnssec_policy.params -%}
  {%- if dnssec_policy_args[statement] is defined -%}
    {% if statement == 'cds_digest_types' -%}
{{ cds_digest_types(dnssec_policy_args[statement]) }}
    {% else -%}
{{ statement|replace('_', '-') }} {{ dnssec_policy_args[statement] }};
    {% endif %}
  {%- endif -%}
{%- endfor %}
{%- if 'nsec3param' in dnssec_policy_args -%}
  {{ nsec3param(dnssec_policy_args['nsec3param']) }}
{%- endif -%}
{% if 'keys' in dnssec_policy_args -%}
  {{ dnssec_policy_keys(dnssec_policy_args['keys']) }}
{%- endif %}
{%- endmacro %}
{# top-level
---
dnssec_policies:
  iterations: int
  optout: "yes" | "no"
  salt_length: int  
#}


{% macro options(options_args) -%}
options {
// Operations statements
{% for statement in bind_clauses.options.operations -%}
  {% if options_args[statement] is defined -%}
    {{ macro_statements[statement](options_args[statement]) | indent(width=2, first=True) }}
  {%- endif %}
{%- endfor %}
{{ macro_statements.version(options_args.version) | indent(width=2, first=True) }}

// transfers statements
{% for statement in bind_clauses.options.transfers -%}
  {%- if options_args[statement] is defined -%}
    {{ macro_statements[statement](options_args[statement]) | indent(width=2, first=True) }}
  {%- endif -%}
{%- endfor %}

// Zone statements
{% for statement in bind_clauses.options.zones -%}
  {% if options_args[statement] is defined -%}
    {{ macro_statements[statement](options_args[statement]) | indent(width=2, first=True) }}
  {%- endif %}
{%- endfor %}

// queries statements
{% for statement in bind_clauses.options.queries -%}
  {% if options_args[statement] is defined -%}
    {{ macro_statements[statement](options_args[statement]) | indent(width=2, first=True) }}
  {%- endif %}
{%- endfor %}

// Security statements
{% for statement in bind_clauses.options.security -%}
  {% if options_args[statement] is defined -%}
    {{ macro_statements[statement](options_args[statement]) | indent(width=2, first=True) }}
  {%- endif %}
{%- endfor %}

// Periodic statements
{% for statement in bind_clauses.options.periodics -%}
  {% if options_args[statement] is defined -%}
    {{ macro_statements[statement](options_args[statement]) | indent(width=2, first=True) }}
  {%- endif %}
{%- endfor %}

};
{%- endmacro %}


{% macro zone(my_name, properties) %}
zone "{{ my_name }}" {{ properties.class|default('') }} {
{# statements for zone argss #}
  type {{ properties.type }};
{#
statements for primary zones
#}
{% if properties.type == 'primary' %}
{% if properties.textfile is defined %}
  file "{{ bind_zones_dir }}/{{ properties.textfile.split('/')[-1] }}";
{% else %}
  file "{{ bind_zones_dir }}/db.{{ my_name }}";
{% endif %}
  {% for statement in bind_clauses.zone.primary -%}
    {% if properties[statement] is defined -%}
      {% if statement == 'also_notify' -%}
        {{ macro_statements.also_notify(properties.also_notify, (properties.also_notify_port|default('')))}}
      {%- elif statement == 'allow_update' and properties.update_policy is not defined -%}
        {{ macro_statements[statement](properties[statement]) | indent(width=2, first=True) }}
      {%- else -%}
        {{ macro_statements[statement](properties[statement]) | indent(width=2, first=True) }}
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%- endif %}
{#
statements for secondary zones
#}
{% if properties.type == 'secondary' -%}
  file "{{ bind_zones_dir }}/db.{{ my_name }}";
  {% for statement in bind_clauses.zone.secondary -%}
    {% if properties[statement] is defined -%}
      {% if statement == 'primaries' -%}
        {{ macro_statements.primaries(properties.primaries, (properties.primaries_port|default(''))) }}
      {% else %}
        {{ macro_statements[statement](properties[statement]) | indent(width=2, first=True) }}
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%- endif %}
{#
statements for forward zones
#}
{% if properties.type == 'forward' -%}
  {% for statement in bind_clauses.zone.forward -%}
    {% if properties[statement] is defined -%}
      {{ macro_statements[statement](properties[statement]) | indent(width=2, first=True) }}
    {%- endif %}
  {%- endfor %}
{%- endif %}
{#
statements for static-stub zones
#}
{% if properties.type == 'static_stub' -%}
  {% for statement in bind_clauses.zone.static_stub -%}
    {% if properties[statement] is defined -%}
      {{ macro_statements[statement](properties[statement]) | indent(width=2, first=True) }}
    {%- endif %}
  {%- endfor %}
{%- endif %}
{#
common statements
#}
{% for statement in bind_clauses.zone.common -%}
  {% if properties[statement] is defined -%}
    {{ macro_statements[statement](properties[statement]) | indent(width=2, first=True) }}
  {%- endif %}
{%- endfor %}
};

{% endmacro %}
